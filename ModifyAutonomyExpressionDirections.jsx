{        /*Copyright 2019 Tomilola AdewaleLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/ //Copyright 2019, Tomilola Adewale All rights reserved.     app.beginUndoGroup("Ma Code");   var myComp = app.project.activeItem; var selectedLayers = myComp.selectedLayers;var myDelay = .2*generateRandomNumber();          for (m = 0; m<selectedLayers.length; m++)  {   var one= [[2,[[485,505]]],[2,[[535,505]]],[2,[[585,505]]],[2,[[635,505]]],[2,[[685,505]]],[2,[[735,505]]],[2,[[785,505]]],[2,[[835,505]]],[2,[[885,505]]],[2,[[935,505]]],[2,[[985,505]]],[2,[[1035,505]]],[2,[[1085,505]]],[2,[[1135,505]]],[2,[[1185,505]]],[2,[[1235,505]]],[2,[[1285,505]]],[2,[[1335,505]]],[2,[[1385,505]]],[2,[[1435,505]]]]var three= [[2,[[485,555]]],[2,[[535,555]]],[2,[[585,555]]],[2,[[635,555]]],[2,[[685,555]]],[2,[[735,555]]],[2,[[785,555]]],[2,[[835,555]]],[2,[[885,555]]],[2,[[935,555]]],[2,[[985,555]]],[2,[[1035,555]]],[2,[[1085,555]]],[2,[[1135,555]]],[2,[[1185,555]]],[2,[[1235,555]]],[2,[[1285,555]]],[2,[[1335,555]]],[2,[[1385,555]]],[2,[[1435,555]]]]//var string= four.concat(three,two.reverse(),one.reverse());var string= one.concat(three.reverse());   var myPosVall=selectedLayers[m].property("position").valueAtTime(0,true);myPosVal=[parseInt(myPosVall[0]),parseInt(myPosVall[1])];var foundIndex=1;            for (i=0; i<string.length;i++)            {            var myExtractedVal= string[i][1][0];            //alert(myPosVal);            //alert(myExtractedVal);                    if (myPosVal[0]==myExtractedVal[0] && myPosVal[1]==myExtractedVal[1])                    {                    foundIndex=i;                    //alert("found it!");                    break;                    }            }//alert(foundIndex);//alert(string);var cutThisPart=string.splice(foundIndex,string.length);//alert(string);var restructure=[];restructure= cutThisPart.concat(string);//append  var myFullString='//usingHoldTimes\nmyOpts =["myBounce","anticipation","normal","linear","fastToSlow","slowToFast","steps","normal2","normal3","extra1","extra2"];\nj=0;\nmarkerStart=0;\nholdTime=.9;\nd='+myDelay+';\nl=thisComp.layer("TheGuide");\nvar myShapeArray = { startPosition: transform.position,\n    theDirections:'+ JSON.stringify(restructure)+'\n};\nfunction tomiEase(rate, startTime, endTime, startVal, endVal) {\n    original = linear(time, startTime, endTime, 0, 2);\n    myScale = rate.valueAtTime(original);\n    return linear(myScale, -2, 2, startVal - (endVal - startVal), endVal);\n}\nfunction myAngles(startPosition, dist, ang) {\n    r = dist;\n    towatch1 = Math.sin(degreesToRadians(ang));\n    towatch2 = Math.cos(degreesToRadians(ang));\n    startVal = startPosition;\n    endVal = startVal + [towatch2 * r, towatch1 * r];\n    return endVal;\n}\nfunction myCircle(startPosition, radius, freq, phase, howMuchOfCycle, start, end, motionType) {\n    freq = freq;\n    phase = phase;\n    amp = radius;\n    myTime = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, 0, freq / (Math.PI * 2 / howMuchOfCycle));\n    //myTime=linear(time,start,end,0,freq/(Math.PI*2/howMuchOfCycle));\n    x = amp * Math.cos(phase + (freq * myTime))\n    y = amp * Math.sin(phase + (freq * myTime))\n    return [x, y] + startPosition + [-radius * Math.cos(phase), -radius * Math.sin(phase)];\n    //How to make it always connect....the custom offset is generated based on the phase \n}\nx = myShapeArray.startPosition;\nend = l.marker.key(1 + markerStart).time + d;\nj = 0;\nendVal = 800;\nstartVal = myShapeArray.startPosition;\nendVal = myShapeArray.startPosition;\ntheNumOfMoves = myShapeArray.theDirections.length;\nmotionType = 2;\nwhile (time >= end && j < theNumOfMoves && j < l.marker.numKeys - 1 - markerStart) {\n    //inside critical while loop\n    theNumOfMoves = myShapeArray.theDirections.length;\n    //above..check the length of the dictionary item\n    seedRandom(j + 2, true);\n    randDist = random(-100, 100);\n    randAng = random(0, 360);\n    randFreq = Math.PI * 2;\n    randPhase = random(-Math.PI * 2, Math.PI * 2);\n    randHow = Math.round(random(1, 4)) * .25;\n    whichType = myShapeArray.theDirections[j][0];\n    if (myShapeArray.theDirections[j].length == 3) {\n        motionType = myShapeArray.theDirections[j][2];\n    } else {\n        motionType = 2\n    }\n    if (whichType == 0) {\n        dist = myShapeArray.theDirections[j][1][0];\n        ang = myShapeArray.theDirections[j][1][1];\n    } else if (whichType == 2) {\n        myPos = myShapeArray.theDirections[j][1][0];\n    } else {\n        radius = myShapeArray.theDirections[j][1][0];\n        freq = myShapeArray.theDirections[j][1][1];\n        phase = myShapeArray.theDirections[j][1][2];\n        howMuchOfCycle = myShapeArray.theDirections[j][1][3];\n    }\n    //the phase above is changing on every j increment\n    j++\n    start = end;\n    startVal = x;\n    if (l.marker.key(j).comment.length >0) {\n        holdTime = parseFloat(l.marker.key(j).comment);\n        if (whichType == 0) {\n            endVal = myAngles(startVal, dist, ang);\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, start+holdTime, startVal, endVal);\n        } else if (whichType == 2) {\n            endVal = myPos;\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, start + holdTime, startVal, endVal);\n        } else {\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = myCircle(startVal, radius, freq, phase, howMuchOfCycle, start, start + holdTime, motionType);\n        }\n    } else {\n\n        if (whichType == 0) {\n            endVal = myAngles(startVal, dist, ang);\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, startVal, endVal);\n        } else if (whichType == 2) {\n            endVal = myPos;\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = tomiEase(thisComp.layer("TheEase").effect(myOpts[motionType % myOpts.length])("Slider"), start, end, startVal, endVal);\n        } else {\n            end += l.marker.key(j + 1 + markerStart).time - l.marker.key(j + markerStart).time;\n            x = myCircle(startVal, radius, freq, phase, howMuchOfCycle, start, end, motionType);\n        }\n    }\n\n    //refill the dictioanary below\n}\nx;'            selectedLayers[m].property("position").expression=myFullString;//selectedLayers[m].property("position").expression="";    }  app.endUndoGroup();    }